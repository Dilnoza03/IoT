vim TestAppC.nc
includes Test;

configuration TestAppC
{
}

implementation
{
  components TestC, MainC;
  components LedsC, new TimerMilliC();

  components ActiveMessageC as AMC;
  components new AMSenderC(AM_TEST_DATA_MSG) as AMSC;

  TestC.Boot -> MainC;
  TestC.Leds -> LedsC;
  TestC.MilliTimer -> TimerMilliC;

  TestC.RadioControl -> AMC;
  TestC.RadioSend -> AMSC;

  components new SensirionSht11C() as Sht11ChOC;
  TestC.Temp -> Sht11ChOC.Temperature;
  TestC.Humi -> Sht11ChOC.Humidity;

  components new IlluAdcC() as Illu;
  TestC.Illu -> Illu;

  components BatteryC;
  TestC.Battery -> BatteryC;
}



vim TestC.nc
module TestC {
  uses {
    interface Boot;
    interface Leds;
    interface Timer<TMilli> as MilliTimer;
    interface SplitControl as RadioControl;
    interface AMSend as RadioSend;

    interface Read<uint16_t> as Temp;
    interface Read<uint16_t> as Humi;
    interface Read<uint16_t> as Illu;

    interface Battery;
  }
}

implementation {
  message_t testMsgBffr;
  test_data_msg_t *testMsg;

  uint32_t seqNo;
  uint8_t step;

  task void startTimer();
  
  event void Boot.booted() {
    testMsg = (test_data_msg_t *)call RadioSend.getPayload(
      &testMsgBffr, sizeof(test_data_msg_t)
    );
    testMsg->srcID = TOS_NODE_ID;
    seqNo = 0;
    post startTimer();
  }

  task void startTimer() {
    call MilliTimer.startPeriodic(TEST_PERIOD);
  }

  task void radioOn();
  event void MilliTimer.fired() {
    post radioOn();
  }

  void startDone();
  task void radioOn() {
    if (call RadioControl.start() != SUCCESS)
      startDone();
  }

  event void RadioControl.startDone(error_t error) {
    startDone();
  }

  task void readTask();
  void startDone() {
    step = 0;
    post readTask();
    call Leds.led0Toggle();
  }

  void sendDone();
  task void sendTask() {
    testMsg->seqNo = seqNo++;
    testMsg->type = 2;

    if (call RadioSend.send(AM_BROADCAST_ADDR, &testMsgBffr,
      sizeof(test_data_msg_t)) != SUCCESS)
      sendDone();
  }

  task void radioOff();
  void sendDone() {
    call Leds.led0Off();
    call Leds.led1Off();
    call Leds.led2Off();
    post radioOff();
  }

  void stopDone();
  task void radioOff() {
    if (call RadioControl.stop() != SUCCESS)
      stopDone();
  }

  event void RadioControl.stopDone(error_t error) {
    stopDone();
  }

  void stopDone() {}

  task void readTask() {
    switch (step) {
      case 0:
        call Temp.read(); break;
      case 1:
        call Humi.read(); break;
      case 2:
        call Illu.read(); break;
      default:
        testMsg->battery = call Battery.getVoltage();
        post sendTask();
        break;
    }
    step += 1;
  }

  event void Temp.readDone(error_t error, uint16_t val) {
    testMsg->Temp = error == SUCCESS ? val : 0xFFFA;
    post readTask();
  }

  event void Humi.readDone(error_t error, uint16_t val) {
    testMsg->Humi = error == SUCCESS ? val : 0xFFFB;
    post readTask();
  }

  event void Illu.readDone(error_t error, uint16_t val) {
    testMsg->Illu = error == SUCCESS ? val : 0xFFFC;
    post readTask();
  }
}


vim Test.h
#ifndef TEST_H
#define TEST_H

#include "message.h"

// Интервал теста
enum {
    TEST_PERIOD = 10240LU,
};

// Значение по умолчанию
enum {
    DELT_VAL = 0x11,
};

// Длина данных теста
enum {
    TEST_DATA_LENGTH = TOSH_DATA_LENGTH - 6,
};

// Тип сообщения
enum {
    AM_TEST_DATA_MSG = 0xA4,
};

// Структура сообщения
typedef nx_struct test_data_msg {
    nx_am_addr_t scID;
    nx_uint32_t seqNo;
    nx_uint16_t type;
    nx_uint16_t Temp;
    nx_uint16_t Humi;
    nx_uint16_t Illu;
    nx_uint16_t battery;
    // nx_uint8_t testData[TEST_DATA_LENGTH]; // Раскомментируйте, если нужно
} test_data_msg_t;

#endif // TEST_H
